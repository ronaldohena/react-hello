import { call, put, select, take, cancel } from 'redux-saga/effects';
import { Action, ActionCreator } from './actionCreatorFactory';
export * from './actionCreatorFactory';
export declare type Handler<InS extends OutS, OutS, P> = (state: InS, payload: P) => OutS;
interface Model<T> {
    namespace: string;
    state?: T;
    reducers?: any;
    effects?: any;
    subscriptions?: any;
}
export interface EffectsCommandMap {
    put: typeof put;
    call: typeof call;
    select: typeof select;
    take: typeof take;
    cancel: typeof cancel;
}
export declare type EffectsHandler<P> = (payload: P, effects: EffectsCommandMap) => void;
export declare type EffectsHandlerWithAction<P> = (payload: Action<P>, effects: EffectsCommandMap) => void;
export declare type EffectsWatcher = (effects: EffectsCommandMap) => void;
export declare class DvaModelBuilder<InS extends OutS, OutS = InS> {
    private model;
    constructor(initState: InS, namespace?: string);
    case: <P>(actionCreator: ActionCreator<P>, handler: Handler<InS, OutS, P>) => this;
    caseWithAction: <P>(actionCreator: ActionCreator<P>, handler: Handler<InS, OutS, Action<P>>) => this;
    takeEvery: <P>(actionCreator: ActionCreator<P>, handler: EffectsHandler<P>) => this;
    takeEveryWithAction: <P>(actionCreator: ActionCreator<P>, handler: EffectsHandlerWithAction<P>) => this;
    takeLatest: <P>(actionCreator: ActionCreator<P>, handler: EffectsHandler<P>) => this;
    takeLatestWithAction: <P>(actionCreator: ActionCreator<P>, handler: EffectsHandlerWithAction<P>) => this;
    throttle: <P>(actionCreator: ActionCreator<P>, handler: EffectsHandler<P>, ms?: number) => this;
    throttleWithAction: <P>(actionCreator: ActionCreator<P>, handler: EffectsHandlerWithAction<P>, ms?: number) => this;
    watcher: <P>(actionCreator: ActionCreator<P>, handler: EffectsWatcher) => this;
    build: () => Model<OutS>;
    private setEffects;
}
